package warstwa_Model.Strona_Admin;

import DataBase_AutoGenerated.Osoba;

import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import java.util.List;


/**
 * Klasa pobierajaca dane z bazy danych
 * dla list klientów
 */
@Stateless
@LocalBean
public class KlienciDAO {


    @PersistenceContext
    private EntityManager entityManager;


    public List<Object[]> getKlienci() {
        return entityManager.createNativeQuery("SELECT k.idKlient, o.Imie, o.Nazwisko, o.Login, o.Haslo, o.Email, o.idOsoba FROM klient k, osoba o WHERE o.idOsoba = k.Osoba_idOsoba AND k.idKlient != 1").getResultList();
    }

    public List<Object[]> getSelectedKlientforUpdate(int idOsoba) {
        return entityManager.createNativeQuery("SELECT k.idKlient, o.Imie, o.Nazwisko, o.Login, o.Haslo, o.Email, o.idOsoba FROM klient k, osoba o WHERE o.idOsoba = k.Osoba_idOsoba AND o.idOsoba =" + idOsoba).getResultList();
    }


    /**
     * Metoda pobierająca id oosoby klienta
     * @param i numer klienta
     * @return zwraca wartosc id jako string
     */
    public String getIdOfPerson(int i) {
        Query query = entityManager.createNativeQuery("SELECT Osoba_idOsoba FROM Klient WHERE idKlient = " + i);
        List list =  query.getResultList();

        return String.valueOf(list).replace("[","").replace("]","");
    }

    /**
     * Metoda pobierajaca liste osob
     * @param i numer klienta
     * @return liste pracownikow
     */


    /**
     * Lista pobierajaca id Klientow
     * @return zwraca liste ze wszystkimi id
     */
    public List<Integer> getIdOfClients(){
        Query query = entityManager.createNativeQuery("SELECT idKlient FROM Klient");
        List list =  query.getResultList();

        return list;
    }

    /**
     * Usuwa klienta z bazy
     * @param idKlienta
     * @param idOsoby
     */
    public void deleteClients(int idKlienta, int idOsoby){
        entityManager.createNativeQuery("DELETE kp FROM koszyk_produkty kp, koszyk_zamowienie kz WHERE kz.idKoszyk = kp.idKoszyk_FK AND idKlient_FK =" + idKlienta).executeUpdate(); // usuwam produkty z koszyka
        entityManager.createNativeQuery("DELETE kz FROM koszyk_zamowienie kz WHERE idKlient_FK ="+ idKlienta).executeUpdate(); // usuwam koszyk
        entityManager.createNativeQuery("DELETE ug FROM user_groups ug WHERE idOsoba =" + idOsoby).executeUpdate();
        entityManager.createNativeQuery("DELETE p FROM powiadomienia p WHERE idOsoba_FK = " + idOsoby).executeUpdate();
        entityManager.createNativeQuery("DELETE k FROM klient k WHERE idKlient = " + idKlienta).executeUpdate();
        entityManager.createNativeQuery("DELETE o FROM osoba o WHERE idOsoba = " + idOsoby).executeUpdate();
    }




        public void updateClients ( int idOsobaSelected, String loginKl, String hasloKl, String imieKl, String nazwiskoKl, String emailKl){
            entityManager.createNativeQuery("UPDATE Osoba SET Login = '" + loginKl + "'," + " Haslo = '" + hasloKl + "'," + " Imie = '" + imieKl + "'," + " Nazwisko = '" + nazwiskoKl + "'," + " Email = '" + emailKl + "' WHERE idOsoba = " + idOsobaSelected).executeUpdate();
        }


}
