package warstwa_Model.Strona_Admin;

import DataBase_AutoGenerated.Osoba;
import DataBase_AutoGenerated.Pracownik;
import DataBase_AutoGenerated.UserGroups;

import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.List;

import static java.lang.Integer.parseInt;

@Stateless
@LocalBean
/**
 * Klasa pobierajaca dane z bazy danych
 * dla list pracownikow
 */
public class PracownicyDAO {


    @PersistenceContext
    private EntityManager entityManager;

    public List<Object[]> getPracownicy() {
        return entityManager.createNativeQuery("SELECT p.idPracownik, o.Imie, o.Nazwisko, o.Login, o.Haslo, p.Stanowisko, p.Pensja, p.Osoba_idOsoba \n" +
                "FROM osoba o, pracownik p \n" +
                "WHERE p.Osoba_idOsoba = o.idOsoba AND p.Stanowisko != 'Administrator'").getResultList();
    }

    public void deletePracownikZapytanie(int idOsoby, int idPracownika) {
        entityManager.createNativeQuery("DELETE ug FROM user_groups ug WHERE idOsoba = " + idOsoby).executeUpdate();
        entityManager.createNativeQuery("DELETE zm FROM zamowienia_magazyn zm WHERE Pracownik_idPracownik = " + idPracownika).executeUpdate();
        entityManager.createNativeQuery("DELETE p FROM powiadomienia p WHERE idOsoba_FK = " + idOsoby).executeUpdate();
        entityManager.createNativeQuery("DELETE pr FROM pracownik pr WHERE idPracownik = " + idPracownika).executeUpdate();
        entityManager.createNativeQuery("DELETE o FROM osoba o WHERE idOsoba = " + idOsoby).executeUpdate();
    }


    public void addWorker_part1(int idOsoba, String login, String haslo, String imie, String nazwisko){
        Osoba osoba = new Osoba();
        osoba.setIdOsoba(idOsoba);
        osoba.setLogin(login);
        osoba.setHaslo(haslo);
        osoba.setImie(imie);
        osoba.setNazwisko(nazwisko);
        entityManager.persist(osoba);
    }

    public void addWorker_part2(int idOsoba){
        UserGroups userGroups = new UserGroups();
        userGroups.setIdOsoba(idOsoba);
        userGroups.setGroupId(2);
        entityManager.persist(userGroups);
    }

    public void addWorker_part3(int idPracownik ,String stanowisko, Integer pensja, int idOsoba){
        Pracownik pracownik = new Pracownik();
        pracownik.setIdPracownik(idPracownik);
        pracownik.setStanowisko("Pracownik");
        pracownik.setPensja(pensja);
        pracownik.setOsobaIdOsoba(idOsoba);
        entityManager.persist(pracownik);
    }

    /**
     * Zwraca ID nowej Osoby
     * @return
     */
    public Integer getIdToAddNewPerson(){
        return parseInt(String.valueOf(entityManager.createNativeQuery("SELECT MAX(idOsoba) FROM osoba").getResultList()).replace("[", "").replace("]", ""));
    }

    /**
     * Zwraca ID nowego klienta
     * @return
     */
    public Integer getIdToAddNewKlient(){
        return parseInt(String.valueOf(entityManager.createNativeQuery("SELECT MAX(idPracownik) FROM pracownik").getResultList()).replace("[", "").replace("]", ""));
    }


}
