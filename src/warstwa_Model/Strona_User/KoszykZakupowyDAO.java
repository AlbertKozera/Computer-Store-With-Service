package warstwa_Model.Strona_User;

import DataBase_AutoGenerated.Faktura;
import DataBase_AutoGenerated.KoszykProdukty;
import DataBase_AutoGenerated.KoszykZamowienie;

import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.List;
import java.util.UUID;

import static java.lang.Integer.parseInt;

@Stateless
@LocalBean
public class KoszykZakupowyDAO {


    @PersistenceContext
    private EntityManager entityManager;


    /**
     * Zwraca liste produktów w koszyku
     * @param id_aktualnie_zalogowanego_klienta
     * @return
     */
    public List<Object[]> getListOfProductsIn_KoszykProdukty(int id_aktualnie_zalogowanego_klienta) {
        return entityManager.createNativeQuery("SELECT p.nazwa, p.cena, p.producent FROM Produkty p, koszyk_produkty kp WHERE p.idProdukty = kp.idProdukty_FK\n" +
                "AND idKoszyk_FK = (SELECT MAX(kz.idKoszyk) FROM koszyk_produkty kp,koszyk_zamowienie kz WHERE kp.idKoszyk_FK=kz.idKoszyk AND kz.idKlient_FK = "+id_aktualnie_zalogowanego_klienta+")").getResultList();
    }

    /**
     * Zwraca bieżącą liste koszyków
     * @param idCurrentKlient
     * @return
     */
    public List<Object[]> getCurrentListOfKoszykZakupowy(int idCurrentKlient){ //zwraca koszyki po zalogowaniu się przez klienta
        return entityManager.createNativeQuery("SELECT kz.idKoszyk ,kz.Ilosc, kz.Cena_koncowa, kz.Rabat, kz.Status, kz.Cena_rabat FROM koszyk_zamowienie kz WHERE idKlient_FK =" + idCurrentKlient).getResultList();
    }

    /**
     * Zwraca bieżącą liste produktów w wybranym koszyku
     * @param id_selected_koszyk
     * @return
     */
    public List<Object[]> getListOfProductsIn_SelectedKoszyk(int id_selected_koszyk) {
        return entityManager.createNativeQuery("SELECT p.nazwa, p.cena, p.producent, kp.idkoszyk_produkty FROM Produkty p, koszyk_produkty kp WHERE p.idProdukty = kp.idProdukty_FK AND idKoszyk_FK =" + id_selected_koszyk).getResultList();
    }

    /**
     * Metoda zwraca wszystkie faktury dla zalogowanego klienta
     * @param idOsoba
     * @param idKlient_FK
     * @return
     */
    public List<Object[]> getFakturyForKlient(int idOsoba, int idKlient_FK) {
        return entityManager.createNativeQuery("SELECT f.Nazwa, f.Cena, f.Ilosc_produktow, f.Data_sprzedazy, o.Imie, o.Nazwisko, o.Miasto, o.Ulica, o.NrDomu, o.KodPocztowy, o.Email, f.Control FROM faktura f, osoba o WHERE o.idOsoba = "+idOsoba+" AND f.idKlient_FK = " + idKlient_FK).getResultList();
    }

    /**
     * Metoda uzupelnia pola niezbedne do faktury
     * @param idOsoby
     * @param miasto
     * @param ulica
     * @param nr_domu
     * @param kod_pocztowy
     */
    public void addDaneDoFaktury(int idOsoby, String miasto, String ulica, String nr_domu, String kod_pocztowy){
        entityManager.createNativeQuery("UPDATE osoba SET Miasto = '"+miasto+"', Ulica = '"+ulica+"', NrDomu = '"+nr_domu+"', KodPocztowy = '"+kod_pocztowy+"' WHERE idOsoba ="+ idOsoby).executeUpdate();
    }

    /**
     * Metoda zwraca aktualne ID osoby zalogowanej
     * @param currentIDklient
     * @return
     */
    public List getCurrentOsobaID(int currentIDklient){
        return entityManager.createNativeQuery("SELECT k.Osoba_idOsoba FROM klient k WHERE k.idKlient =" + currentIDklient).getResultList();
    }

    /**
     * Metoda dodajaca fakture do bazy
     * @param data_sprzedazy
     * @param cena
     * @param ilosc_produktow
     * @param idKlient_FK
     */
    public void addFaktura(String data_sprzedazy, String cena, String ilosc_produktow, int idKlient_FK){

        List list = entityManager.createNativeQuery("SELECT MAX(idFaktura) FROM faktura").getResultList();
        int idFaktura = parseInt(list.toString().replace("[", "").replace("]", ""));

        Faktura faktura = new Faktura();
        faktura.setIdFaktura(idFaktura+1);
        faktura.setNazwa("tranzakcja standardowa");
        faktura.setCena(cena);
        faktura.setIloscProduktow(ilosc_produktow);
        faktura.setDataSprzedazy(data_sprzedazy);
        faktura.setIdKlientFk(idKlient_FK);
        String uniqueID = UUID.randomUUID().toString();
        faktura.setControl(uniqueID);
        entityManager.persist(faktura);
    }

    /**
     * Dodaje nowy produkt do koszyka
     * @param idKoszyK_FK
     * @param idProdukty_FK
     */
    public void addKoszykProdukty(int idKoszyK_FK, int idProdukty_FK){
        KoszykProdukty koszykProdukty = new KoszykProdukty();
        koszykProdukty.setIdKoszykFk(idKoszyK_FK);
        koszykProdukty.setIdProduktyFk(idProdukty_FK);
        entityManager.persist(koszykProdukty);
    }

    /**
     * Dodaje nowy koszyk
     * @param idKlient_FKK
     */
    public void addKoszykZamowienie(int idKlient_FKK){

        List list = entityManager.createNativeQuery("SELECT MAX(idKoszyk) FROM koszyk_zamowienie").getResultList();
        int idKoszyk = parseInt(list.toString().replace("[", "").replace("]", ""));

        KoszykZamowienie koszykZamowienie = new KoszykZamowienie();
        koszykZamowienie.setIdKoszyk(idKoszyk+1);
        koszykZamowienie.setIdKlientFk(idKlient_FKK);
        koszykZamowienie.setIlosc(0);
        koszykZamowienie.setCenaKoncowa(0);
        koszykZamowienie.setCenaRabat(0);
        koszykZamowienie.setRabat("0%");
        koszykZamowienie.setStatus("-");
        entityManager.persist(koszykZamowienie);
    }

    /**
     * Uzupełnia ilość produktów w koszyku
     * @param id_current_koszyk
     */
    public void addIloscProduktow__Koszyk_Zamowienie(int id_current_koszyk) {
        entityManager.createNativeQuery("UPDATE koszyk_zamowienie SET Ilosc= (SELECT count(idProdukty_FK) From koszyk_produkty WHERE idKoszyk_FK = "+ id_current_koszyk +") WHERE idKoszyk = "+ id_current_koszyk).executeUpdate();
    }

    /**
     * Uzupełnia cene końcową w koszyku
     * @param id_current_koszyk
     */
    public void addCenaKoncowa__Koszyk_Zamowienie(int id_current_koszyk) {
        entityManager.createNativeQuery("UPDATE koszyk_zamowienie SET Cena_koncowa = (Select SUM(p.cena) From produkty p, koszyk_produkty kp WHERE kp.idKoszyk_FK = "+ id_current_koszyk +" AND kp.idProdukty_FK = p.idProdukty) WHERE idKoszyk =" + id_current_koszyk).executeUpdate();
    }

    /**
     * Dodaje rabat do koszyka
     * @param nazwa_kodu_rabatowego
     * @param id_selected_koszyk
     */
    public void addRabat__Koszyk_Zamowienia(String nazwa_kodu_rabatowego, int id_selected_koszyk) {
        List list = entityManager.createNativeQuery("SELECT kr.rabat_procent FROM kody_rabatowe kr WHERE kr.nazwa = '" + nazwa_kodu_rabatowego + "'").getResultList();
        if(list.isEmpty())
            entityManager.createNativeQuery("UPDATE koszyk_zamowienie SET Rabat= '0%' WHERE idKoszyk =" + id_selected_koszyk).executeUpdate();
        else
            entityManager.createNativeQuery("UPDATE koszyk_zamowienie SET Rabat= (SELECT kr.rabat_procent FROM kody_rabatowe kr WHERE kr.nazwa = '" + nazwa_kodu_rabatowego + "') WHERE idKoszyk =" + id_selected_koszyk).executeUpdate();
    }

    /**
     * Zwraca zawartość koszyka
     * @return
     */
    public List getAllFromKoszykProdukty(){
        return entityManager.createNativeQuery("SELECT * FROM koszyk_produkty").getResultList();
    }

    /**
     * Dodaje cenę po rabacie
     * @param cena_po_rabacie
     * @param idKoszyk
     */
    public void addCenaPoRabacie(int cena_po_rabacie, int idKoszyk) {
        entityManager.createNativeQuery("UPDATE koszyk_zamowienie SET Cena_rabat = "+cena_po_rabacie+" WHERE idKoszyk =" + idKoszyk).executeUpdate();
    }

    /**
     * Usuwa pojedyńczy produkt z listy produktów w koszyku
     * @param id_produktu_ktory_usuwamy_z_koszyka
     */
    public void deleteProduktFrom__Koszyk_Produkty(int id_produktu_ktory_usuwamy_z_koszyka){
        entityManager.createNativeQuery("DELETE FROM koszyk_produkty WHERE idkoszyk_produkty ="+ id_produktu_ktory_usuwamy_z_koszyka).executeUpdate();
    }

    /**
     * Usuwa cały pojedyńczy koszyk
     * @param id_koszyka_ktory_chcemy_usunac
     */
    public void deleteKoszykFrom__Koszyk_Zamowienie(int id_koszyka_ktory_chcemy_usunac){
        entityManager.createNativeQuery("DELETE FROM koszyk_produkty WHERE idKoszyk_FK ="+ id_koszyka_ktory_chcemy_usunac).executeUpdate();
        entityManager.createNativeQuery("DELETE FROM koszyk_zamowienie WHERE idKoszyk ="+ id_koszyka_ktory_chcemy_usunac).executeUpdate();
    }

    /**
     * Zeruje rabaty w koszyku
     * @param id_current_koszyk
     */
    public void zerujRabaty(int id_current_koszyk) {
        entityManager.createNativeQuery("UPDATE koszyk_zamowienie SET Cena_rabat = Cena_koncowa WHERE idKoszyk =" + id_current_koszyk).executeUpdate();
        entityManager.createNativeQuery("UPDATE koszyk_zamowienie SET Rabat = '0%' WHERE idKoszyk =" + id_current_koszyk).executeUpdate();
    }

    /**
     * Zeruje wybrany koszyk
     * @param id_koszyka_do_wyzerowania
     */
    public void zerujKoszykZamowienie(int id_koszyka_do_wyzerowania) {
        entityManager.createNativeQuery("DELETE FROM koszyk_produkty WHERE idKoszyk_FK ="+ id_koszyka_do_wyzerowania).executeUpdate();
        entityManager.createNativeQuery("UPDATE koszyk_zamowienie SET Ilosc = 0, Cena_koncowa = 0, Cena_rabat = 0, Rabat = '0%', Status = '-' WHERE idKoszyk =" + id_koszyka_do_wyzerowania).executeUpdate();
    }

    /**
     * Zabezpieczenie przed nullem w cenie końcowej
     */
    public void nullSecurity_CenaKoncowa(){
        entityManager.createNativeQuery("UPDATE koszyk_zamowienie SET Cena_koncowa = 0 WHERE Cena_koncowa IS NULL").executeUpdate();
    }

    /**
     * Zwraca ilość koszyków bieżącego klienta
     * @param idKlient_FK
     * @return
     */
    public List getNumberOf__Koszyk_Zamowienie(int idKlient_FK){
        return entityManager.createNativeQuery("SELECT COUNT(idKoszyk) FROM koszyk_zamowienie WHERE idKlient_FK =" + idKlient_FK).getResultList();
    }

    /**
     * Zwraca wybraną cene końcową
     * @param id_selected_koszyk
     * @return
     */
    public List getSelectedCenaKoncowa(int id_selected_koszyk) {
        return entityManager.createNativeQuery("SELECT kz.Cena_koncowa FROM koszyk_zamowienie kz WHERE idKoszyk =" + id_selected_koszyk).getResultList();
    }

    /**
     * Zwraca wybrany rabat
     * @param nazwa_kodu_rabatowego
     * @return
     */
    public List getSelectedRabat(String nazwa_kodu_rabatowego) {
        return entityManager.createNativeQuery("SELECT kr.rabat FROM kody_rabatowe kr WHERE kr.nazwa = '" + nazwa_kodu_rabatowego + "'").getResultList();
    }

    /**
     * Zwraca bieżące ID użytkownika
     * @param currentUsername
     * @return
     */
    public List getCurrentUserID(String currentUsername){
        return entityManager.createNativeQuery("SELECT k.idKlient FROM klient k, osoba o WHERE o.idOsoba = k.Osoba_idOsoba AND o.Login = '" + currentUsername + "'").getResultList();
    }

    /**
     * zwraca id aktualnego koszyka po zalogowaniu się przez klienta ( jest to ustalone umownie --> najnowszy koszyk dodany ostatnio przez tego klienta będzie tym który klient będzie edytował po wejściu na swoje konto)
     * @param idCurrentKlient
     * @return
     */
    public List getCurrentIdOfKoszykZakupowy(int idCurrentKlient){
        return entityManager.createNativeQuery("SELECT MAX(kz.idKoszyk) FROM koszyk_produkty kp,koszyk_zamowienie kz WHERE kz.idKlient_FK =" + idCurrentKlient).getResultList();
    }

}
